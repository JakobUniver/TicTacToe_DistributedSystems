# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tictactoe_pb2 as tictactoe__pb2


class ReadyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServerReady = channel.unary_unary(
                '/ReadyService/ServerReady',
                request_serializer=tictactoe__pb2.ReadyRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.ReadyResponse.FromString,
                )


class ReadyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ServerReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReadyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServerReady': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerReady,
                    request_deserializer=tictactoe__pb2.ReadyRequest.FromString,
                    response_serializer=tictactoe__pb2.ReadyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReadyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReadyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ServerReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReadyService/ServerReady',
            tictactoe__pb2.ReadyRequest.SerializeToString,
            tictactoe__pb2.ReadyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DateTimeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDateTime = channel.unary_unary(
                '/DateTimeService/GetDateTime',
                request_serializer=tictactoe__pb2.GetDateTimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.GetDateTimeResponse.FromString,
                )
        self.SetDateTime = channel.unary_unary(
                '/DateTimeService/SetDateTime',
                request_serializer=tictactoe__pb2.SetDateTimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.SetDateTimeResponse.FromString,
                )


class DateTimeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDateTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDateTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DateTimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDateTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDateTime,
                    request_deserializer=tictactoe__pb2.GetDateTimeRequest.FromString,
                    response_serializer=tictactoe__pb2.GetDateTimeResponse.SerializeToString,
            ),
            'SetDateTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDateTime,
                    request_deserializer=tictactoe__pb2.SetDateTimeRequest.FromString,
                    response_serializer=tictactoe__pb2.SetDateTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DateTimeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DateTimeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDateTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DateTimeService/GetDateTime',
            tictactoe__pb2.GetDateTimeRequest.SerializeToString,
            tictactoe__pb2.GetDateTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDateTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DateTimeService/SetDateTime',
            tictactoe__pb2.SetDateTimeRequest.SerializeToString,
            tictactoe__pb2.SetDateTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListBoard = channel.unary_unary(
                '/GameService/ListBoard',
                request_serializer=tictactoe__pb2.ListBoardRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.ListBoardResponse.FromString,
                )
        self.SetSymbol = channel.unary_unary(
                '/GameService/SetSymbol',
                request_serializer=tictactoe__pb2.SetSymbolRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.SetSymbolResponse.FromString,
                )
        self.SetTime = channel.unary_unary(
                '/GameService/SetTime',
                request_serializer=tictactoe__pb2.SetTimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.SetTimeResponse.FromString,
                )


class GameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListBoard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListBoard': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBoard,
                    request_deserializer=tictactoe__pb2.ListBoardRequest.FromString,
                    response_serializer=tictactoe__pb2.ListBoardResponse.SerializeToString,
            ),
            'SetSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSymbol,
                    request_deserializer=tictactoe__pb2.SetSymbolRequest.FromString,
                    response_serializer=tictactoe__pb2.SetSymbolResponse.SerializeToString,
            ),
            'SetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTime,
                    request_deserializer=tictactoe__pb2.SetTimeRequest.FromString,
                    response_serializer=tictactoe__pb2.SetTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListBoard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GameService/ListBoard',
            tictactoe__pb2.ListBoardRequest.SerializeToString,
            tictactoe__pb2.ListBoardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GameService/SetSymbol',
            tictactoe__pb2.SetSymbolRequest.SerializeToString,
            tictactoe__pb2.SetSymbolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GameService/SetTime',
            tictactoe__pb2.SetTimeRequest.SerializeToString,
            tictactoe__pb2.SetTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ElectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendElection = channel.unary_unary(
                '/ElectionService/SendElection',
                request_serializer=tictactoe__pb2.ElectionRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.ElectionResponse.FromString,
                )


class ElectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendElection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendElection': grpc.unary_unary_rpc_method_handler(
                    servicer.SendElection,
                    request_deserializer=tictactoe__pb2.ElectionRequest.FromString,
                    response_serializer=tictactoe__pb2.ElectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ElectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ElectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendElection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ElectionService/SendElection',
            tictactoe__pb2.ElectionRequest.SerializeToString,
            tictactoe__pb2.ElectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CoordinatorElected = channel.unary_unary(
                '/CoordinatorService/CoordinatorElected',
                request_serializer=tictactoe__pb2.CoordinatorRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.CoordinatorResponse.FromString,
                )


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CoordinatorElected(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CoordinatorElected': grpc.unary_unary_rpc_method_handler(
                    servicer.CoordinatorElected,
                    request_deserializer=tictactoe__pb2.CoordinatorRequest.FromString,
                    response_serializer=tictactoe__pb2.CoordinatorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CoordinatorElected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoordinatorService/CoordinatorElected',
            tictactoe__pb2.CoordinatorRequest.SerializeToString,
            tictactoe__pb2.CoordinatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AssignSymbolServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AssignSymbol = channel.unary_unary(
                '/AssignSymbolService/AssignSymbol',
                request_serializer=tictactoe__pb2.AssignSymbolRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.AssignSymbolResponse.FromString,
                )


class AssignSymbolServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AssignSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssignSymbolServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AssignSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignSymbol,
                    request_deserializer=tictactoe__pb2.AssignSymbolRequest.FromString,
                    response_serializer=tictactoe__pb2.AssignSymbolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AssignSymbolService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AssignSymbolService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AssignSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AssignSymbolService/AssignSymbol',
            tictactoe__pb2.AssignSymbolRequest.SerializeToString,
            tictactoe__pb2.AssignSymbolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
